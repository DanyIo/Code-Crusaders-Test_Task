{"version":3,"file":"static/js/417.10d9f221.chunk.js","mappings":"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","sources":["app/hooks.ts","components/ScrollBar/ScrollBar.tsx","pages/Expense/ExpenseList/ExpenseList.tsx","pages/Expense/Expense.tsx","../node_modules/@mui/icons-material/Clear.js"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import styled from \"@emotion/styled\";\nimport { Box } from \"@mui/material\";\n\nexport const CustomScrollBar = styled(Box)(({ theme }) => ({\n  maxHeight: \"300px\",\n  overflowY: \"auto\",\n  width: \"100%\",\n  mt: 2,\n\n  \"&::-webkit-scrollbar\": {\n    width: \"6px\",\n  },\n\n  \"&::-webkit-scrollbar-thumb\": {\n    backgroundColor: \"black\",\n    borderRadius: \"3px\",\n  },\n\n  \"&::-webkit-scrollbar-thumb:hover\": {\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n  },\n\n  \"&::-webkit-scrollbar-track\": {\n    backgroundColor: \"transparent\",\n  },\n\n  \"&::-webkit-scrollbar-track-piece\": {\n    background: \"rgba(0, 0, 0, 0.1)\",\n    borderRadius: \"3px\",\n  },\n}));\n","import {\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TableHead,\n  Box,\n  Typography,\n} from \"@mui/material\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { IconButton } from \"@mui/material\";\n\nimport { useSelector } from \"react-redux\";\n\nimport {\n  selectExpense,\n  deleteExpense,\n} from \"../../../features/financeSlice/financeSlice\";\nimport { useAppDispatch } from \"../../../app/hooks\";\n\nexport const ExpenseList = () => {\n  const expenses = useSelector(selectExpense);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Box\n      sx={{\n        marginTop: \"10px\",\n        padding: \"5px\",\n        width: \"90%\",\n        paddingTop: 0,\n        borderRadius: \"5px\",\n        fontFamily: \"Georgia\",\n        background: \"white\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {expenses.length === 0 ? (\n        <Typography sx={{ fontFamily: \"Georgia\", ml: 4 }}>\n          No expenses added yet.\n        </Typography>\n      ) : (\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell style={{ fontFamily: \"Georgia\" }}>Title</TableCell>\n              <TableCell style={{ fontFamily: \"Georgia\" }}>Amount</TableCell>\n              <TableCell style={{ fontFamily: \"Georgia\" }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {expenses.map((row, index) => (\n              <TableRow key={row.title}>\n                <TableCell>{row.title}</TableCell>\n                <TableCell>{row.amount}</TableCell>\n                <TableCell>\n                  <IconButton\n                    color=\"secondary\"\n                    sx={{ color: \"black\" }}\n                    onClick={() => dispatch(deleteExpense(index))}\n                  >\n                    <ClearIcon />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      )}\n      <Box mt={2} />\n    </Box>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Typography, TextField, Button, Box } from \"@mui/material\";\n\nimport { ExpenseList } from \"./ExpenseList/ExpenseList\";\nimport { expenseSetGetService } from \"../../services/expenseSetGetService\";\nimport { expenseDeleteService } from \"../../services/expenseDeleteService\";\n\nimport {\n  addExpense,\n  addTransaction,\n  reduceTheTotalBudget,\n  selectTotalBudget,\n} from \"../../features/financeSlice/financeSlice\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { CustomScrollBar } from \"../../components/ScrollBar/ScrollBar\";\nimport { useSelector } from \"react-redux\";\n\nconst ExpensePage = () => {\n  const [expenseTitle, setExpenseTitle] = useState(\"\");\n  const [expenseAmount, setExpenseAmount] = useState(\"\");\n  const [expenses, setExpenses] = useState<{ title: string; amount: number }[]>(\n    []\n  );\n\n  const dispatch = useAppDispatch();\n  const totalBudget = useSelector(selectTotalBudget);\n  const handleExpenseSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (\n      expenseTitle.trim() === \"\" ||\n      isNaN(parseFloat(expenseAmount)) ||\n      parseFloat(expenseAmount) > totalBudget\n    ) {\n      return;\n    }\n\n    const newExpense = {\n      title: expenseTitle,\n      amount: parseFloat(expenseAmount),\n    };\n\n    // expenseSetGetService(\n    //   newExpense.title,\n    //   newExpense.amount\n    // );\n\n    //expenseDeleteService();\n\n    dispatch(addExpense(newExpense));\n    dispatch(reduceTheTotalBudget(parseFloat(expenseAmount)));\n    dispatch(\n      addTransaction({ action: \"Expense\", amount: parseFloat(expenseAmount) })\n    );\n\n    setExpenses([...expenses, newExpense]);\n\n    setExpenseTitle(\"\");\n    setExpenseAmount(\"\");\n  };\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        backgroundColor: \"white\",\n        borderRadius: \"3%\",\n        marginTop: 20,\n        padding: \"2rem\",\n        boxShadow: \"rgba(17, 12, 46, 0.15) 0px 48px 100px 0px\",\n        marginBottom: \"50px\",\n      }}\n    >\n      <Typography variant=\"h3\" sx={{ mb: 2, fontFamily: \"Georgia\" }}>\n        Expense Page\n      </Typography>\n      <form onSubmit={handleExpenseSubmit}>\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <TextField\n            label=\"Expense Title\"\n            value={expenseTitle}\n            onChange={(e) => setExpenseTitle(e.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n\n          <TextField\n            label=\"Expense Amount\"\n            value={expenseAmount}\n            onChange={(e) => setExpenseAmount(e.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            color=\"primary\"\n            sx={{\n              mt: 2,\n              backgroundColor: \"black\",\n              \":hover\": {\n                backgroundColor: \"gray\",\n              },\n            }}\n          >\n            Add Expense\n          </Button>\n        </Box>\n      </form>\n      <h2\n        style={{\n          padding: 10,\n          fontWeight: \"normal\",\n          color: \"black\",\n          fontSize: 26,\n        }}\n      >\n        Expense history\n      </h2>\n      <CustomScrollBar>\n        <ExpenseList />\n      </CustomScrollBar>\n    </Box>\n  );\n};\n\nexport default ExpensePage;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\nexports.default = _default;"],"names":["useAppDispatch","useDispatch","CustomScrollBar","styled","Box","_ref","theme","maxHeight","overflowY","width","mt","backgroundColor","borderRadius","background","ExpenseList","expenses","useSelector","selectExpense","dispatch","_jsxs","sx","marginTop","padding","paddingTop","fontFamily","display","justifyContent","alignItems","flexDirection","children","length","_jsx","Typography","ml","Table","size","TableHead","TableRow","TableCell","style","TableBody","map","row","index","title","amount","IconButton","color","onClick","deleteExpense","ClearIcon","_useState","useState","_useState2","_slicedToArray","expenseTitle","setExpenseTitle","_useState3","_useState4","expenseAmount","setExpenseAmount","_useState5","_useState6","setExpenses","totalBudget","selectTotalBudget","boxShadow","marginBottom","variant","mb","onSubmit","e","preventDefault","trim","isNaN","parseFloat","newExpense","addExpense","reduceTheTotalBudget","addTransaction","action","concat","_toConsumableArray","TextField","label","value","onChange","target","fullWidth","margin","Button","type","fontWeight","fontSize","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}